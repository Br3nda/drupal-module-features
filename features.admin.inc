<?php
// $Id: features.admin.inc,v 1.1.2.26 2009/10/01 20:24:28 yhahn Exp $

/**
 * Form callback for features export form. Acts as a router based on the form_state.
 */
function features_export_form($form_state, $feature = NULL) {
  module_load_include('inc', 'features', 'features.export');
  features_include();

  $form = array(
    '#attributes' => array('class' => 'features-export-form'),
    '#feature' => isset($feature) ? $feature : NULL,
  );
  $form['info'] = array(
    '#type' => 'fieldset',
    '#tree' => FALSE,
  );
  $form['info']['name'] = array(
    '#title' => t('Name'),
    '#description' => t('Example: Image gallery'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => !empty($feature->info['name']) ? $feature->info['name'] : '',
    '#attributes' => array('class' => 'feature-name'),
  );
  $form['info']['project'] = array(
    '#type' => 'textfield',
    '#title' => t('Machine-readable name'),
    '#description' => t('Example: image_gallery'). '<br/>' .t('May only contain lowercase letters, numbers and underscores. <strong>Try to avoid conflicts with the names of existing Drupal projects.</strong>'),
    '#required' => TRUE,
    '#default_value' => !empty($feature->name) ? $feature->name : '',
    '#attributes' => array('class' => 'feature-project'),
  );
  $form['info']['description'] = array(
    '#title' => t('Description'),
    '#description' => t('Provide a short description of what users should expect when they enable your feature.'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => !empty($feature->info['description']) ? $feature->info['description'] : '',
  );
  $form['info']['version'] = array(
    '#title' => t('Version'),
    '#description' => t('Examples: 6.x-1.0, 6.x-1.0-beta1'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => !empty($feature->info['version']) ? $feature->info['version'] : '',
    '#size' => 30,
  );
  $form['info']['project_status_url'] = array(
    '#title' => t('URL of update XML'),
    '#description' => t('Example: http://mywebsite.com/fserver'),
    '#type' => 'textfield',
    '#required' => FALSE,
    '#default_value' => !empty($feature->info['project status url']) ? $feature->info['project status url'] : '',
    '#size' => 30,
  );

  // User-selected feature source components.
  $components = array_keys(features_get_components());
  $components[] = 'dependencies';
  $form['export'] = array(
    '#type' => 'fieldset',
    '#tree' => FALSE,
    '#theme' => 'features_form_export',
  );
  $form['export']['components'] = array(
    '#title' => t('Add components'),
    '#type' => 'select',
    '#options' => array('------'),
    '#attributes' => array('class' => 'features-select-components'),
  );
  $form['export']['sources'] = array(
    '#tree' => TRUE,
    '#theme' => 'features_form_components',
  );
  foreach ($components as $component) {
    // Tack on dependency options as they are not a feature component proper.
    if ($component == 'dependencies') {
      $required = drupal_required_modules();
      $options = array();
      foreach (features_get_modules() as $module_name => $info) {
        if (!in_array($module_name, $required) && $info->status && !empty($info->info)) {
          $options[$module_name] = $info->info['name'];
        }
      }
      $default_value = !empty($feature->info['dependencies']) ? $feature->info['dependencies'] : array();
    }
    else {
      $options = features_invoke($component, 'features_export_options');
      $default_value = !empty($feature->info['features'][$component]) ? $feature->info['features'][$component] : array();
    }
    if ($options) {
      $form['export']['components']['#options'][$component] = $component;
      $form['export']['sources'][$component] = array(
        '#type' => 'checkboxes',
        '#options' => $options,
        '#title' => $component,
        '#default_value' => $default_value,
        '#ahah' => array(
          'path' => 'admin/build/features/export/populate',
          'wrapper' => 'features-export-populated',
        ),
      );
    }
  }
  $form['export']['features'] = array(
    '#tree' => TRUE,
    '#type' => 'markup',
    '#prefix' => "<div id='features-export-populated'>",
    '#suffix' => "</div>",
    '#value' => !empty($feature->info) ? theme('features_components', $feature->info, $feature->info['features']) : "<div class='placeholder'></div>",
  );

  $form['buttons'] = array('#theme' => 'features_form_buttons', '#tree' => FALSE);
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Download feature'),
    '#weight' => 10,
    '#submit' => array('features_export_build_form_submit'),
  );
  return $form;
}

/**
 * Submit handler for features_export_form_build().
 */
function features_export_build_form_submit($form, &$form_state) {
  // Assemble the combined component list
  $stub = array();
  $components = array_keys(features_get_components());
  foreach ($components as $component) {
    // User-selected components take precedence.
    if (!empty($form_state['values']['sources'][$component])) {
      $stub[$component] = array_filter($form_state['values']['sources'][$component]);
    }
    // Only fallback to an existing feature's values if there are no export options for the component.
    else if (!empty($form['#feature']->info['features'][$component])) {
      $stub[$component] = $form['#feature']->info['features'][$component];
    }
  }

  // Generate populated feature
  $export = features_populate($stub, $form_state['values']['project']);

  // Directly copy the following attributes
  $attr = array('name', 'description', 'project', 'version');
  foreach ($attr as $key) {
    $export[$key] = isset($form_state['values'][$key]) ? $form_state['values'][$key] : NULL;
  }
  if (!empty($form_state['values']['project_status_url'])) {
    $export['project status url'] = $form_state['values']['project_status_url'];
  }

  // Minimize detected dependencies and then merge in existing dependencies
  if (!empty($form_state['values']['sources']['dependencies'])) {
    $dependencies = array_filter($form_state['values']['sources']['dependencies']);
    $export['dependencies'] = _features_export_preserve_dependencies($export['dependencies'], NULL, $dependencies);
  }

  // Generate download
  if ($files = features_export_render($export, $export['project'], TRUE)) {
    $module_name = $export['project'];
    $filename = !empty($export['version']) ? "{$module_name}-{$export['version']}" : $module_name;

    $tar = array();
    foreach ($files as $extension => $file_contents) {
      if (!in_array($extension, array('module', 'info'))) {
        $extension .= '.inc';
      }
      $tar["{$module_name}/{$module_name}.$extension"] = $file_contents;
    }
    $tar = features_tar_create($tar);

    $header = function_exists('gzencode') ? 'Content-type: application/x-gzip' : 'Content-type: application/x-tar';
    $filename = !empty($filename) ? $filename : $module_name;
    $filename = function_exists('gzencode') ? "{$filename}.tgz" : "{$filename}.tar";

    drupal_set_header($header);
    drupal_set_header('Content-Disposition: attachment; filename="'. $filename .'"');
    print $tar;
    exit;
  }
}

/**
 * AHAH handler for features_export_form_build().
 */
function features_export_build_form_populate() {
  module_load_include('inc', 'features', 'features.export');
  features_include();

  $form_state = array();
  $submitted = $_POST;

  // Only uncomment this for debugging AJAX action
  $submitted = !empty($_POST) ? $_POST : $_GET;

  if ($form = form_get_cache($submitted['form_build_id'], $form_state)) {
    $stub = array();

    // Assemble the combined component list
    $components = array_keys(features_get_components());
    foreach ($components as $component) {
      // User-selected components take precedence.
      if (!empty($submitted['sources'][$component])) {
        $stub[$component] = $submitted['sources'][$component];
      }
      // Only fallback to an existing feature's values if there are no export options for the component.
      else if (!isset($form['export']['sources'][$component]) && !empty($form['#feature']->info['features'][$component])) {
        $stub[$component] = $form['#feature']->info['features'][$component];
      }
    }

    // Ensure source dependencies are populated
    $stub['dependencies'] = isset($submitted['sources']['dependencies']) ? $submitted['sources']['dependencies'] : array();

    // Generate populated feature
    $export = features_populate($stub, $submitted['project']);
    $export['dependencies'] = _features_export_preserve_dependencies($export['dependencies'], NULL, $stub['dependencies']);

    drupal_json(array('status' => TRUE, 'data' => theme('features_components', $export, $stub)));
    exit;
  }
  drupal_json(array('status' => FALSE, 'data' => ''));
  exit;
}

/**
 * admin/build/features page callback.
 */
function features_admin_form($feature = NULL) {
  // Load export functions to use in comparison.
  module_load_include('inc', 'features', 'features.export');

  // Clear & rebuild key caches
  module_rebuild_cache();
  features_rebuild();

  $form = array('#theme' => 'features_form');

  $form['feature'] =
  $form['links'] =
  $form['version'] =
  $form['weight'] =
  $form['status'] = array(
    '#tree' => TRUE,
  );

  $modules = features_get_modules('', TRUE);
  $conflicts = features_get_conflicts();

  // Generate features form.
  foreach (features_get_features('', TRUE) as $name => $module) {
    $form['feature'][$name] = array(
      '#type' => 'value',
      '#value' => $module,
    );

    $disabled = FALSE;
    $description = $module->info['description'];

    // Detect unmet dependencies
    if (!empty($module->info['dependencies'])) {
      $unmet_dependencies = array();
      $dependencies = _features_export_maximize_dependencies($module->info['dependencies']);
      foreach ($dependencies as $dependency) {
        if (empty($modules[$dependency])) {
          $unmet_dependencies[] = theme('features_module_status', FEATURES_MODULE_MISSING, $dependency);
        }
      }
      if (!empty($unmet_dependencies)) {
        $description .= "<div class='dependencies'>". t('Unmet dependencies: !dependencies', array('!dependencies' => implode(', ', $unmet_dependencies))) ."</div>";
        $disabled = TRUE;
      }
    }

    // Detect potential conflicts
    if (!empty($conflicts[$name])) {
      $module_conflicts = array();
      foreach ($conflicts[$name] as $conflict) {
        $module_conflicts[] = theme('features_module_status', FEATURES_MODULE_MISSING, $conflict);
        // Only disable modules with conflicts if they are not already enabled.
        // If they are already enabled, somehow the user got themselves into a
        // bad situation and they need to be able to disable a conflicted module.
        if (module_exists($conflict) && !module_exists($name)) {
          $disabled = TRUE;
        }
      }
      $description .= "<div class='conflicts'>". t('Incompatible with: !conflicts', array('!conflicts' => implode(', ', $module_conflicts))) ."</div>";
    }

    $form['status'][$name] = array(
      '#type' => 'checkbox',
      '#title' => $module->info['name'],
      '#description' => $description,
      '#default_value' => $module->status,
      '#disabled' => $disabled,
    );

    if (!empty($module->info['project status url'])) {
      $uri = l(truncate_utf8($module->info['project status url'], 35, TRUE, TRUE), $module->info['project status url']);
    }
    else if (isset($module->info['project'], $module->info['version'], $module->info['datestamp'])) {
      $uri = l('http://drupal.org', 'http://drupal.org/project/'. $module->info['project']);
    }
    else {
      $uri = t('Unavailable');
    }
    $version = !empty($module->info['version']) ? $module->info['version'] : '';
    $version = !empty($version) ? "<div class='description'>$version</div>" : '';
    $form['sign'][$name] = array('#type' => 'markup', '#value' => "{$uri} {$version}");

    // Add status link
    $item = menu_get_item("admin/build/features/{$name}");
    if ($module->status) {
      $path = $item && $item['access'] ? $item['href'] : NULL;
      $state = '<span class="admin-loading features-storage">' . t('Checking...') . '</span>';
      $state .= l(t('Check'), "admin/build/features/{$name}/status", array('attributes' => array('class' => 'admin-check')));
      $state .= theme('features_storage_link', FEATURES_NEEDS_REVIEW, $path);
      $state .= theme('features_storage_link', FEATURES_OVERRIDDEN, $path);
      $state .= theme('features_storage_link', FEATURES_DEFAULT, $path);
    }
    else {
      $state = '<span class="features-storage">'. t('Disabled') .'</span>';
    }

    // Add in update link
    $item = menu_get_item("admin/build/features/{$name}/recreate");
    if ($item && $item['access']) {
      $state .= l($item['title'], $item['href'], array('attributes' => array('class' => 'admin-update')));
    }

    $form['state'][$name] = array(
      '#type' => 'markup',
      '#value' => !empty($state) ? $state : '',
    );
  }

  $form['buttons'] = array(
    '#theme' => 'features_form_buttons',
  );
  $form['buttons']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save settings'),
    '#submit' => array('features_form_submit'),
    '#validate' => array('features_form_validate'),
  );
  return $form;
}

/**
 * Display the components of a feature.
 */
function features_admin_components($form_state, $feature) {
  module_load_include('inc', 'features', 'features.export');
  $form = array();

  // Store feature info for theme layer.
  $form['module'] = array('#type' => 'value', '#value' => $feature->name);
  $form['#info'] = $feature->info;
  $form['#dependencies'] = array();
  if (!empty($feature->info['dependencies'])) {
    foreach ($feature->info['dependencies'] as $dependency) {
      $status = features_get_module_status($dependency);
      $form['#dependencies'][$dependency] = $status;
    }
  }

  $review = $revert = FALSE;

  // Iterate over components and retrieve status for display
  $states = features_get_component_states(array($feature->name), FALSE);
  $form['revert']['#tree'] = TRUE;
  foreach ($feature->info['features'] as $component => $items) {
    if (in_array($states[$feature->name][$component], array(FEATURES_OVERRIDDEN, FEATURES_NEEDS_REVIEW))) {
      switch ($states[$feature->name][$component]) {
        case FEATURES_OVERRIDDEN:
          $revert = TRUE;
          break;
        case FEATURES_NEEDS_REVIEW:
          $review = TRUE;
          break;
      }
      $form['revert'][$component] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
      );
    }
    $path = ($states[$feature->name][$component] != FEATURES_DEFAULT && module_exists('diff')) ? "admin/build/features/{$feature->name}/diff/{$component}" : NULL;
    $conflicts[$component] = theme('features_storage_link', $states[$feature->name][$component], $path);
    $form['components'][$component] = array(
      '#type' => 'markup',
      '#value' => theme('features_storage_link', $states[$feature->name][$component], $path),
    );
  }

  if ($review || $revert) {
    $form['buttons'] = array('#theme' => 'features_form_buttons', '#tree' => TRUE);
    if ($revert || $review) {
      $form['buttons']['revert'] = array(
        '#type' => 'submit',
        '#value' => t('Revert components'),
        '#submit' => array('features_admin_components_revert'),
      );
    }
    if ($review) {
      $form['buttons']['review'] = array(
        '#type' => 'submit',
        '#value' => t('Mark as reviewed'),
        '#submit' => array('features_admin_components_review'),
      );
    }
  }
  return $form;
}

/**
 * Submit handler for revert form.
 */
function features_admin_components_revert(&$form, &$form_state) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  $module = $form_state['values']['module'];
  $revert = array();
  foreach (array_filter($form_state['values']['revert']) as $component => $status) {
    $revert[$module][] = $component;
    drupal_set_message(t('Reverted all <strong>!component</strong> components for <strong>!module</strong>.', array('!component' => $component, '!module' => $module)));
  }
  features_revert($revert);
  $form_state['redirect'] = 'admin/build/features/'. $module;
}

/**
 * Submit handler for revert form.
 */
function features_admin_components_review(&$form, &$form_state) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  $module = $form_state['values']['module'];
  $revert = array();
  foreach (array_filter($form_state['values']['revert']) as $component => $status) {
    features_set_signature($module, $component);
    drupal_set_message(t('All <strong>!component</strong> components for <strong>!module</strong> reviewed.', array('!component' => $component, '!module' => $module)));
  }
  $form_state['redirect'] = 'admin/build/features/'. $module;
}

/**
 * Validate handler for the 'manage features' form.
 */
function features_form_validate(&$form, &$form_state) {
  $conflicts = features_get_conflicts();
  foreach ($form_state['values']['status'] as $module => $status) {
    if ($status && !empty($conflicts[$module])) {
      foreach ($conflicts[$module] as $conflict) {
        if (!empty($form_state['values']['status'][$conflict])) {
          form_set_error('status', t('The feature !module cannot be enabled because it conflicts with !conflict.', array('!module' => $module, '!conflict' => $conflict)));
        }
      }
    }
  }
}

/**
 * Submit handler for the 'manage features' form
 */
function features_form_submit(&$form, &$form_state) {
  module_load_include('inc', 'features', 'features.export');

  $features = $form_state['values']['feature'];
  $install = array();
  $disable = array();
  if (!empty($features)) {
    foreach ($features as $name => $feature) {
      // Enable feature
      if ($form_state['values']['status'][$name] && !module_exists($name)) {
        if (!empty($feature->info['dependencies'])) {
          $dependencies = _features_export_maximize_dependencies($feature->info['dependencies']);
          foreach ($dependencies as $dependency) {
            if (!module_exists($dependency)) {
              $install[] = $dependency;
            }
          }
        }
        $install[] = $name;
      }
      // Disable feature
      else if (!$form_state['values']['status'][$name] && module_exists($name)) {
        $disable[] = $name;
      }
    }

    if (!empty($install)) {
      $install = array_unique($install);
      module_enable($install);

      // Make sure the install API is available.
      include_once './includes/install.inc';
      drupal_install_modules($install);
    }
    if (!empty($disable)) {
      module_disable($disable);
    }
  }

  // Clear drupal caches after enabling a feature. We do this in a separate
  // page callback rather than as part of the submit handler as some modules
  // have includes/other directives of importance in hooks that have already
  // been called in this page load.
  $form_state['redirect'] = 'admin/build/features/cache-clear';
}

/**
 * Clear caches after enabling a feature.
 */
function features_cache_clear() {
  drupal_flush_all_caches();
  drupal_goto('admin/build/features');
}

/**
 * Page callback to display the differences between what's in code and
 * what is in the db.
 *
 * @param $feature
 *   A loaded feature object to display differences for.
 * @param $component
 *   Optional: specific component to display differences for. If excluded, all components are used.
 *
 * @return Themed display of what is different.
 */
function features_feature_diff($feature, $component = NULL) {
  drupal_add_css(drupal_get_path('module', 'features') .'/features.css');
  module_load_include('inc', 'features', 'features.export');

  $overrides = features_detect_overrides($feature);

  if (!empty($overrides)) {
    // Filter overrides down to specified component.
    if (isset($component) && isset($overrides[$component])) {
      $overrides = array($component => $overrides[$component]);
    }

    module_load_include('php', 'diff', 'DiffEngine');
    $formatter = new DrupalDiffFormatter();
    $rows = array();
    foreach ($overrides as $component => $items) {
      $diff = new Diff(explode("\n", $items['default']), explode("\n", $items['normal']));
      $rows[] = array(array('data' => $component, 'colspan' => 4, 'header' => TRUE));
      $rows = array_merge($rows, $formatter->format($diff));
    }
    $header = array(
      array('data' => t('Default'), 'colspan' => 2),
      array('data' => t('Overrides'), 'colspan' => 2),
    );
    $output .= theme('diff_table', $header, $rows, array('class' => 'diff features-diff'));
  }
  else {
    $output = "<div class='features-empty'>". t('No changes have been made to this feature.') ."</div>";
  }
  $output = "<div class='features-comparison'>{$output}</div>";
  return $output;
}

/**
 * Javascript call back that returns the status of a feature.
 */
function features_feature_status($feature) {
  module_load_include('inc', 'features', 'features.export');
  return drupal_json(array('storage' => features_get_storage($feature->name)));
}

/**
 * Detect potential conflicts between any features that provide
 * identical components.
 */
function features_get_conflicts($reset = FALSE) {
  $conflicts = array();
  $component_info = features_get_components();
  $map = features_get_component_map($reset);

  foreach ($map as $type => $components) {
    foreach ($components as $component => $modules) {
      if (isset($component_info[$type]['duplicates']) && $component_info[$type]['duplicates'] == FEATURES_DUPLICATES_ALLOWED) {
        continue;
      }
      else if (count($modules) > 1) {
        foreach ($modules as $module) {
          if (!isset($conflicts[$module])) {
            $conflicts[$module] = array();
          }
          foreach ($modules as $m) {
            if ($m != $module) {
              $conflicts[$module][$m] = $m;
            }
          }
        }
      }
    }
  }

  return $conflicts;
}

/**
 * Provide a component to feature map.
 */
function features_get_component_map($reset = FALSE) {
  static $map;

  if (!isset($map) || $reset) {
    $map = array();
    $features = features_get_features('', TRUE);
    foreach ($features as $feature) {
      foreach ($feature->info['features'] as $type => $components) {
        if (!isset($map[$type])) {
          $map[$type] = array();
        }
        foreach ($components as $component) {
          $map[$type][$component][] = $feature->name;
        }
      }
    }
  }

  return $map;
}

/**
 * Simple wrapper returns the status of a module.
 */
function features_get_module_status($module) {
  if (module_exists($module)) {
    return FEATURES_MODULE_ENABLED;
  }
  else if (features_get_modules($module)) {
    return FEATURES_MODULE_DISABLED;
  }
  else {
    return FEATURES_MODULE_MISSING;
  }
}
