<?php
// $Id: features.install,v 1.1.2.1 2009/09/11 02:19:46 yhahn Exp $

/**
 * Implementaton of hook_install().
 */
function features_install() {
  _features_install_menu();
  db_query("UPDATE {system} SET weight = 20 WHERE name = 'features' AND type = 'module'");
}

/**
 * Create menu. See menu.install for an example.
 */
function _features_install_menu() {
  $t = get_t();
  db_query("INSERT INTO {menu_custom} (menu_name, title, description) VALUES ('%s', '%s', '%s')", 'features', $t('Features'), $t('Menu items for any enabled features.'));
}

/**
 * Update 6100: Set module on all feature node types to 'features'.
 
 * This update can be re-run as needed to repair any node types that are not 
 * removed after disabling the associated feature.
 * 
 * Any feature implementing a node component that was exported prior to this 
 * version of the features.module will need to have its 'module' declaration 
 * in hook_node_info() changed from 'node' to 'features'.
 */
function features_update_6100() {
  $ret = array();

  foreach (features_get_features(NULL, TRUE) as $feature) {
    if (module_exists($feature->name) && $types = module_invoke($feature->name, 'node_info')) {
      foreach ($types as $type => $type_data) {
        $sql = "SELECT COUNT(*) FROM {node_type} WHERE module = 'node' AND type = '%s'";
        // Only update if the hook_node_info type's module is 'features' and the db type's
        // module is 'node'.
        if (($type_data['module'] == 'features') && db_result(db_query($sql, $type))) {
          $ret[] = update_sql("UPDATE {node_type} SET module = 'features' WHERE type = '$type'");
        }
      }
    }
  }
  return $ret;
}
